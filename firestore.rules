/**
 * @file Firestore Security Rules
 * @core Philosophy: This ruleset enforces a strict user-ownership model for all data. Each user fully owns their profile and associated startup data (startups, color palettes, and logo suggestions).
 * @data Structure:
 *   - /users/{userId}: Stores user profiles.
 *   - /users/{userId}/startups/{startupId}: Stores startups owned by a specific user.
 *   - /users/{userId}/startups/{startupId}/colorPalettes/{colorPaletteId}: Stores color palettes for a startup.
 *   - /users/{userId}/startups/{startupId}/logoSuggestions/{logoSuggestionId}: Stores logo suggestions for a startup.
 * @key Security Decisions:
 *   - User data is private and only accessible to the owning user.
 *   - Startups, color palettes, and logo suggestions are owned by the user and only accessible to them.
 *   - Listing operations are allowed for owners within their user-scoped collections.
 *   - Denormalization is used to enforce ownership, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, list, update, delete) - User with ID 'user123' can read, update, and delete their profile if request.auth.uid == 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, list, update, delete) - User with ID 'user456' cannot read, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for startups.
     * @path /users/{userId}/startups/{startupId}
     * @allow (create) - User 'user123' can create a startup under their profile.
     * @allow (get, list, update, delete) - User 'user123' can read, update, and delete their own startups.
     * @deny (create) - User 'user456' cannot create a startup under the profile of user 'user123'.
     * @deny (get, list, update, delete) - User 'user456' cannot read, update, or delete the startups of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/startups/{startupId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for color palettes associated with startups.
     * @path /users/{userId}/startups/{startupId}/colorPalettes/{colorPaletteId}
     * @allow (create) - User 'user123' can create a color palette for their startup.
     * @allow (get, list, update, delete) - User 'user123' can read, update, and delete color palettes associated with their startups.
     * @deny (create) - User 'user456' cannot create a color palette under the startup of user 'user123'.
     * @deny (get, list, update, delete) - User 'user456' cannot read, update, or delete the color palettes of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/startups/{startupId}/colorPalettes/{colorPaletteId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for logo suggestions associated with startups.
     * @path /users/{userId}/startups/{startupId}/logoSuggestions/{logoSuggestionId}
     * @allow (create) - User 'user123' can create a logo suggestion for their startup.
     * @allow (get, list, update, delete) - User 'user123' can read, update, and delete logo suggestions associated with their startups.
     * @deny (create) - User 'user456' cannot create a logo suggestion under the startup of user 'user123'.
     * @deny (get, list, update, delete) - User 'user456' cannot read, update, or delete the logo suggestions of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/startups/{startupId}/logoSuggestions/{logoSuggestionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}